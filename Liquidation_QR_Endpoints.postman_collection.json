{
	"info": {
		"_postman_id": "liquidation-qr-endpoints",
		"name": "Liquidation QR Endpoints",
		"description": "Collection pour tester les endpoints QR du LiquidationController",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1. Authentification",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"username\": \"admin\",\n  \"password\": \"admin123\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/auth/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"auth",
						"login"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has token\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('token');",
							"    pm.expect(jsonData.token).to.be.a('string');",
							"    pm.expect(jsonData.token.length).to.be.greaterThan(0);",
							"});",
							"",
							"// Sauvegarde du token",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"jwt_token\", jsonData.token);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "2. Créer Liquidation de Test",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"customer\": {\n    \"firstName\": \"John\",\n    \"lastName\": \"Doe\",\n    \"address\": \"123 Main Street, Abidjan, Côte d'Ivoire\",\n    \"ifu\": \"IFU123456789\",\n    \"phone\": \"+22512345678\",\n    \"email\": \"john.doe@example.com\"\n  },\n  \"taxType\": \"TVA\",\n  \"amount\": 50000.00,\n  \"issueDate\": \"2024-01-15\",\n  \"dueDate\": \"2024-02-15\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/liquidations",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"liquidations"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Liquidation created\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('id');",
							"    pm.environment.set(\"liquidation_id\", jsonData.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "3. Génération QR Statique",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"qrType\": \"STATIC\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/liquidations/{{liquidation_id}}/generate-qr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"liquidations",
						"{{liquidation_id}}",
						"generate-qr"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"QR type is STATIC\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.qrType).to.eql(\"STATIC\");",
							"});",
							"",
							"pm.test(\"QR code is generated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.qrCode).to.be.a('string');",
							"    pm.expect(jsonData.qrCode.length).to.be.greaterThan(0);",
							"    pm.expect(jsonData.qrCode).to.include('0002010102');",
							"});",
							"",
							"// Sauvegarde pour les tests suivants",
							"if (pm.response.code === 200) {",
							"    var jsonData = pm.response.json();",
							"    pm.environment.set(\"qr_code_data\", jsonData.qrCode);",
							"    pm.environment.set(\"qr_type\", jsonData.qrType);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "4. Génération QR Dynamique",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"qrType\": \"DYNAMIC\",\n  \"transactionReference\": \"REF123456789\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/liquidations/{{liquidation_id}}/generate-qr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"liquidations",
						"{{liquidation_id}}",
						"generate-qr"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"QR type is DYNAMIC\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.qrType).to.eql(\"DYNAMIC\");",
							"});",
							"",
							"pm.test(\"Transaction reference is set\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.transactionId).to.eql(\"REF123456789\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "5. Génération QR P2P",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"qrType\": \"P2P\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/liquidations/{{liquidation_id}}/generate-qr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"liquidations",
						"{{liquidation_id}}",
						"generate-qr"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"QR type is P2P\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.qrType).to.eql(\"P2P\");",
							"});",
							"",
							"pm.test(\"Transaction ID contains P2P prefix\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.transactionId).to.include(\"P2P\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "6. Génération QR avec Pénalités",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"qrType\": \"PENALTY\",\n  \"penaltyAmount\": 5000.00\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/liquidations/{{liquidation_id}}/generate-qr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"liquidations",
						"{{liquidation_id}}",
						"generate-qr"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"QR type is PENALTY\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.qrType).to.eql(\"PENALTY\");",
							"});",
							"",
							"pm.test(\"Penalty amount is included\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.penaltyAmount).to.eql(5000.00);",
							"});",
							"",
							"pm.test(\"Total amount is calculated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.totalAmount).to.eql(55000.00);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "7. Récupération Image QR",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/liquidations/{{liquidation_id}}/qr-image",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"liquidations",
						"{{liquidation_id}}",
						"qr-image"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"QR image is present\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.qrImageBase64).to.be.a('string');",
							"    pm.expect(jsonData.qrImageBase64.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"Content type is image/png\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.contentType).to.eql(\"image/png\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "8. Régénération QR",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"qrType\": \"DYNAMIC\",\n  \"transactionReference\": \"NEW_REF_789\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/liquidations/{{liquidation_id}}/regenerate-qr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"liquidations",
						"{{liquidation_id}}",
						"regenerate-qr"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is true\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(true);",
							"});",
							"",
							"pm.test(\"QR code is regenerated\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.qrCode).to.be.a('string');",
							"    pm.expect(jsonData.qrCode.length).to.be.greaterThan(0);",
							"});",
							"",
							"pm.test(\"New transaction reference is used\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.transactionId).to.eql(\"NEW_REF_789\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "9. Test Erreur - Liquidation Inexistante",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"qrType\": \"STATIC\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/liquidations/99999/generate-qr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"liquidations",
						"99999",
						"generate-qr"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Success is false\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.success).to.eql(false);",
							"});",
							"",
							"pm.test(\"Error message is correct\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Liquidation non trouvée\");",
							"    pm.expect(jsonData.error).to.eql(\"Liquidation introuvable\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		},
		{
			"name": "10. Test Erreur - Type QR Invalide",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{jwt_token}}"
					},
					{
						"key": "Content-Type",
						"value": "application/json"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n  \"qrType\": \"INVALID_TYPE\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/liquidations/{{liquidation_id}}/generate-qr",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"liquidations",
						"{{liquidation_id}}",
						"generate-qr"
					]
				}
			},
			"response": [],
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Validation error is returned\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('errors');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Tests globaux pour toutes les requêtes",
					"pm.test(\"Response time is less than 2000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"pm.test(\"Response has JSON content type\", function () {",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "jwt_token",
			"value": "",
			"type": "string"
		},
		{
			"key": "liquidation_id",
			"value": "1",
			"type": "string"
		}
	]
}
